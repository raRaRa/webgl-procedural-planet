precision highp float;

uniform mat3 nMatrix;
uniform vec3 color;
uniform sampler2D uPositionMap;
uniform sampler2D uHeightMap;
uniform sampler2D uLUT;
uniform float drawWireframe;
uniform float depth;
uniform float res;
uniform float normalMul;
uniform vec3 patchPos;
uniform float uHeightmapOffset;
uniform float uDebugQuadtree;


varying vec2 vHeightmapTexCoord;
varying vec3 vBC;
varying highp vec2 vUV;
varying vec3 normal;
varying vec3 lightDir;
varying vec3 v;
varying highp vec2 texelPos;
varying vec2 vNormalUV;
varying float vSample;


#extension GL_OES_standard_derivatives : enable

float edgeFactor(){
    vec3 d = fwidth(vBC);
    vec3 a3 = smoothstep(vec3(0.0), d*1.0, vBC);
    return min(min(a3.x, a3.y), a3.z);
}



/*float DecodeFloatRGBA( vec3 pt ) {
  return dot( vec4(pt, 1.0), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0) );
}
float getPoint(in vec2 p) {
	return DecodeFloatRGBA(texture2D(uPositionMap, p).rgb);
}*/


/*vec4 getNormal()
{

	
	//if (tpos.x < 0.1)
	//tpos.x = 0.1;
	vec3 off = vec3(-NORMAL_OFF, 0, NORMAL_OFF);
	vec2 tpos = vNormalUV;// + vec2(off.z, off.z);
	
	// s11 = Current
	float s11 = getPoint(tpos);//texture2D(uPositionMap, tpos).x;
	// s01 = Left
	float s01 = getPoint(vec2(tpos.xy + off.xy));
	// s21 = Right
	float s21 = getPoint(vec2(tpos.xy + off.zy));
	// s10 = Below
	float s10 = getPoint(vec2(tpos.xy + off.yx));
	// s12 = Above
	float s12 = getPoint(vec2(tpos.xy + off.yz));
	
	vec3 va = normalize( vec3(off.zy, s21 - s11) );
	vec3 vb = normalize( vec3(off.yz, s12 - s11) );
	


	return vec4(cross(va, vb), s11);
}*/
/*
float normalStrength = 1.0;

vec3 PSNormal()
{
	float texelWidth = 1.0 / res;
	float tl = texture2D(uPositionMap, vNormalUV + texelWidth * vec2(-1.0, -1.0)).a;   // top left  
	float  l = texture2D(uPositionMap, vNormalUV + texelWidth * vec2(-1.0,  0.0)).a;   // left  
	float bl = texture2D(uPositionMap, vNormalUV + texelWidth * vec2(-1.0,  1.0)).a;   // bottom left  
	float  t = texture2D(uPositionMap, vNormalUV + texelWidth * vec2( 0.0, -1.0)).a;   // top  
	float  b = texture2D(uPositionMap, vNormalUV + texelWidth * vec2( 0.0,  1.0)).a;   // bottom  
	float tr = texture2D(uPositionMap, vNormalUV + texelWidth * vec2( 1.0, -1.0)).a;   // top right  
	float  r = texture2D(uPositionMap, vNormalUV + texelWidth * vec2( 1.0,  0.0)).a;   // right  
	float br = texture2D(uPositionMap, vNormalUV + texelWidth * vec2( 1.0,  1.0)).a;   // bottom right  
    
   // Compute dx using Sobel:  
   //           -1 0 1   
   //           -2 0 2  
   //           -1 0 1  

   float dX = tr + 2.0 * r + br -tl - 2.0 * l - bl; 

   // Compute dy using Sobel:  
   //           -1 -2 -1   
   //            0  0  0  
   //            1  2  1  

   float dY = bl + 2.0 * b + br -tl - 2.0 * t - tr; 

   vec3 N = normalize(vec3(dX, dY, 1.0 / (normalStrength * (1.0 + pow(2.0, depth + 1.0))))); 
   // was float4 N = float4(normalize(float3(dX, 1.0f / normalStrength, dY)), 1.0f);
  
   return N; //* normalMul;
}
*/

/*
vec3 getPosMap(in vec2 p) {
	return texture2D(uPositionMap, p).rgb;

	//return vec3(v.r, v.g, v.b) * v.a;
}

vec3 newNormal() {
	vec2 tpos = vNormalUV;

	float one = vSample;
//	float two = NORMAL_OFF + NORMAL_OFF;
	//float texel = getPoint(vec2(tpos.x + one, tpos.y + one));

	vec3 currentPos = getPosMap(vec2(tpos.x, tpos.y));

	vec3 e0 = getPosMap(vec2(tpos.x - one, tpos.y)) - currentPos;
	vec3 e1 = getPosMap(vec2(tpos.x + one, tpos.y)) - currentPos;
	vec3 e2 = getPosMap(vec2(tpos.x , tpos.y - one)) - currentPos;
	vec3 e3 = getPosMap(vec2(tpos.x, tpos.y + one)) - currentPos;
//
	vec3 n0 = cross(e0, e2);
	vec3 n1 = cross(e1, e3);

	return normalize(n0 + n1) * normalMul;


}*/

float DecodeFloatRGBA( vec4 pt ) {
  return dot( pt, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0) );
}

void main()
{

	/*vec3 lightDir = normalize(lightPos - pos);
	float lambertian = max(dot(lightDir, normal), 0.0);
	float specular = 0.0;

	vec3 viewDir = normalize(-pos);

    // this is blinn phong
    vec3 halfDir = normalize(lightDir + viewDir);
    float specAngle = max(dot(halfDir, normal), 0.0);
    specular = pow(specAngle, 16.0);

	

*/

   // vec3 N = newNormal();
    vec3 N = texture2D(uPositionMap, texelPos).rgb * 2.0 - 1.0;

  //  float normalStrength = 0.5;
   //	tempN.z = tempN.z / (normalStrength * ( pow(2.0, depth )));

//	N = (N + normal);



	vec4 heightMapTexture = texture2D(uHeightMap, vHeightmapTexCoord);

	float lutValue = (heightMapTexture.x + 0.01) * 8.2;

    N = normalize(nMatrix * N);

 	

	vec4 ambient = vec4(0.05, 0.05, 0.05, 1.0);
	vec4 diffuse = vec4(0.85, 0.85, 0.85, 1.0);
	vec4 specular = vec4(0.01, 0.01, 0.01, 1.0);

	//vec3 N = normalize(nMatrix * normal);
	vec3 L = normalize(lightDir);
	vec3 E = normalize(-v);
	vec3 R = normalize(-reflect(L,N));
				
	//calculate Ambient Term:  
	vec4 Iamb = ambient;    
	//vec4 specular = vec4(1.0 * 0.2, 1.0 * 0.2, 1.0 * 0.2, 1.0);
	//calculate Diffuse Term:  
	vec4 Idiff = diffuse * max(dot(N,L), 0.0);
	Idiff = clamp(Idiff, 0.0, 1.0);     

	// calculate Specular Term:
	vec4 Ispec = specular * pow(max(dot(R,E), 0.0), 10.0);
	Ispec = clamp(Ispec, 0.0, 1.0); 

	vec4 final_color = ambient + Iamb + Idiff + Ispec;

	//vec4 posMapTexture = texture2D(uPositionMap, texelPos);

	vec4 color = texture2D(uLUT, vec2(0, 0.5));

	//gl_FragColor = vec4(tempN.w, 0.0, 0.0, 1.0);

	//gl_FragColor = color;// * final_color;
	gl_FragColor = color * final_color;

	//gl_FragColor = vec4(texture.a, 0.0, 0.0, 1.0);

	//gl_FragColor = vec4(N, 1.0);
	//gl_FragColor = vec4(N, 1.0);
	//gl_FragColor = vec4(texture);
	//vec4 heightMapTexture = texture2D(uHeightMap, texelPos);
	//gl_FragColor = vec4(1.0-heightMapTexture.x, 1.0-heightMapTexture.x, 1.0-heightMapTexture.x, 1.0);
	//gl_FragColor = heightMapTexture * 6.0;

	gl_FragColor.rgb += vec3((1.0-edgeFactor())*0.95*drawWireframe, 0.0, 0.0);

}